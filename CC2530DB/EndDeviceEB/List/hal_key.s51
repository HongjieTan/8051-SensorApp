///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        05/Nov/2019  17:48:15 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Components\h /
//                          al\target\CC2530EB\hal_key.c                      /
//    Command line       =  -f D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Z /
//                          igbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\ /
//                          zstack\Samples\SensorApp\CC2530DB\..\..\..\Tools\ /
//                          CC2530DB\f8wEndev.cfg (-DCPU32MHZ                 /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0       /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00200000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x15 -DNWK_START_DELAY=100  /
//                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F             /
//                          -DBEACON_REQUEST_DELAY=100                        /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä× /
//                          ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC /
//                          2530-eV1.3\Components\hal\target\CC2530EB\hal_key /
//                          .c -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D    /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC         /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\EndDeviceEB\List\  /
//                          -lA D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\ /
//                          Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects /
//                          \zstack\Samples\SensorApp\CC2530DB\EndDeviceEB\Li /
//                          st\ --diag_suppress Pe001,Pa010 -o                /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\EndDeviceEB\Obj\   /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\ -I                /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\Source\ -I      /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\ZMain\TI2 /
//                          530DB\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-V /
//                          S¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Pr /
//                          ojects\zstack\Samples\SensorApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\include\ -I                 /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\hal\target\CC2530EB\ -I                   /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\include\ -I                           /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\high_level\ -I                        /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\low_level\srf04\ -I                   /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\low_level\srf04\single_chip\ -I       /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mt\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT- /
//                          IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1 /
//                          .3\Projects\zstack\Samples\SensorApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\osal\include\ -I           /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\saddr\ -I                        /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\sdata\ -I                        /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\af\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁ /
//                          Ï\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC25 /
//                          30-eV1.3\Projects\zstack\Samples\SensorApp\CC2530 /
//                          DB\..\..\..\..\..\Components\stack\nwk\ -I        /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\sapi\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä× /
//                          ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC /
//                          2530-eV1.3\Projects\zstack\Samples\SensorApp\CC25 /
//                          30DB\..\..\..\..\..\Components\stack\sec\ -I      /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\sys\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×Ê /
//                          ÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2 /
//                          530-eV1.3\Projects\zstack\Samples\SensorApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\zdo\ -I       /
//                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\zmac\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CV /
//                          T-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-e /
//                          V1.3\Projects\zstack\Samples\SensorApp\CC2530DB\. /
//                          .\..\..\..\..\Components\zmac\f8w\ -Ohz           /
//                          --require_prototypes                              /
//    List file          =  D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigb /
//                          ee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zst /
//                          ack\Samples\SensorApp\CC2530DB\EndDeviceEB\List\h /
//                          al_key.s51                                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_key

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET

        PUBLIC ??HalKeyConfig?relay
        FUNCTION ??HalKeyConfig?relay,0203H
        PUBLIC ??HalKeyInit?relay
        FUNCTION ??HalKeyInit?relay,0203H
        PUBLIC ??HalKeyPoll?relay
        FUNCTION ??HalKeyPoll?relay,0203H
        PUBLIC ??HalKeyRead?relay
        FUNCTION ??HalKeyRead?relay,0203H
        PUBLIC HalKeyConfig
        FUNCTION HalKeyConfig,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyInit
        FUNCTION HalKeyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyPoll
        FUNCTION HalKeyPoll,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyRead
        FUNCTION HalKeyRead,0203H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
HalKeyConfig        SYMBOL "HalKeyConfig"
??HalKeyConfig?relay SYMBOL "?relay", HalKeyConfig
HalKeyInit          SYMBOL "HalKeyInit"
??HalKeyInit?relay  SYMBOL "?relay", HalKeyInit
HalKeyPoll          SYMBOL "HalKeyPoll"
??HalKeyPoll?relay  SYMBOL "?relay", HalKeyPoll
HalKeyRead          SYMBOL "HalKeyRead"
??HalKeyRead?relay  SYMBOL "?relay", HalKeyRead

// D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Components\hal\target\CC2530EB\hal_key.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_key.c
//    3   Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
//    4   Revision:       $Revision: 23815 $
//    5 
//    6   Description:    This file contains the interface to the HAL KEY Service.
//    7 
//    8 
//    9   Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 /*********************************************************************
//   40  NOTE: If polling is used, the hal_driver task schedules the KeyRead()
//   41        to occur every 100ms.  This should be long enough to naturally
//   42        debounce the keys.  The KeyRead() function remembers the key
//   43        state of the previous poll and will only return a non-zero
//   44        value if the key state changes.
//   45 
//   46  NOTE: If interrupts are used, the KeyRead() function is scheduled
//   47        25ms after the interrupt occurs by the ISR.  This delay is used
//   48        for key debouncing.  The ISR disables any further Key interrupt
//   49        until KeyRead() is executed.  KeyRead() will re-enable Key
//   50        interrupts after executing.  Unlike polling, when interrupts
//   51        are enabled, the previous key state is not remembered.  This
//   52        means that KeyRead() will return the current state of the keys
//   53        (not a change in state of the keys).
//   54 
//   55  NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
//   56        the ISR.  Therefore, the joystick movements will only be detected
//   57        during a pushbutton interrupt caused by S1 or the center joystick
//   58        pushbutton.
//   59 
//   60  NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
//   61        high state to a low state.  This transition is typically clean.  The
//   62        duration of the low state is around 200ms.  When the signal returns
//   63        to the high state, there is a high likelihood of signal bounce, which
//   64        causes a unwanted interrupts.  Normally, we would set the interrupt
//   65        edge to falling edge to generate an interrupt when S1 is pushed, but
//   66        because of the signal bounce, it is better to set the edge to rising
//   67        edge to generate an interrupt when S1 is released.  The debounce logic
//   68        can then filter out the signal bounce.  The result is that we typically
//   69        get only 1 interrupt per button push.  This mechanism is not totally
//   70        foolproof because occasionally, signal bound occurs during the falling
//   71        edge as well.  A similar mechanism is used to handle the joystick
//   72        pushbutton on the DB.  For the EB, we do not have independent control
//   73        of the interrupt edge for the S1 and center joystick pushbutton.  As
//   74        a result, only one or the other pushbuttons work reasonably well with
//   75        interrupts.  The default is the make the S1 switch on the EB work more
//   76        reliably.
//   77 
//   78 *********************************************************************/
//   79 
//   80 /**************************************************************************************************
//   81  *                                            INCLUDES
//   82  **************************************************************************************************/
//   83 #include "hal_mcu.h"
//   84 #include "hal_defs.h"
//   85 #include "hal_types.h"
//   86 #include "hal_board.h"
//   87 #include "hal_drivers.h"
//   88 #include "hal_adc.h"
//   89 #include "hal_key.h"
//   90 #include "osal.h"
//   91 
//   92 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//   93 
//   94 /**************************************************************************************************
//   95  *                                              MACROS
//   96  **************************************************************************************************/
//   97 
//   98 /**************************************************************************************************
//   99  *                                            CONSTANTS
//  100  **************************************************************************************************/
//  101 #define HAL_KEY_RISING_EDGE   0
//  102 #define HAL_KEY_FALLING_EDGE  1
//  103 
//  104 #define HAL_KEY_DEBOUNCE_VALUE  25
//  105 
//  106 /* CPU port interrupt */
//  107 #define HAL_KEY_CPU_PORT_0_IF P0IF
//  108 #define HAL_KEY_CPU_PORT_2_IF P2IF
//  109 
//  110 /* SW_6 is at P0.1 */             //yt SW_6 Ê¹ÓÃ°åÔØ°´¼üS1£¬IO¿ÚP0_4
//  111 #define HAL_KEY_SW_6_PORT   P0
//  112 //#define HAL_KEY_SW_6_BIT    BV(1)
//  113 #define HAL_KEY_SW_6_BIT    BV(4) //yt
//  114 #define HAL_KEY_SW_6_SEL    P0SEL
//  115 #define HAL_KEY_SW_6_DIR    P0DIR
//  116 
//  117 /* edge interrupt */
//  118 #define HAL_KEY_SW_6_EDGEBIT  BV(0)
//  119 #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
//  120 
//  121 
//  122 /* SW_6 interrupts */
//  123 #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
//  124 #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  125 #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
//  126 //yt #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
//  127 #define HAL_KEY_SW_6_ICTLBIT  BV(4) /* P0IEN - P0.4 enable/disable bit */
//  128 #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
//  129 
//  130 /* Joy stick move at P2.0 */        //yt ÓëLED D3µÄIO¿Ú³åÍ»£¬ÔİÇÒ¸ÄÎªP2.2ÎŞÊÓÆä¹¦ÄÜ
//  131 #define HAL_KEY_JOY_MOVE_PORT   P2
//  132 //#define HAL_KEY_JOY_MOVE_BIT    BV(0)
//  133 #define HAL_KEY_JOY_MOVE_BIT    BV(2) //yt 
//  134 #define HAL_KEY_JOY_MOVE_SEL    P2SEL
//  135 #define HAL_KEY_JOY_MOVE_DIR    P2DIR
//  136 
//  137 /* edge interrupt */
//  138 #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
//  139 #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
//  140 
//  141 /* Joy move interrupts */
//  142 #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
//  143 #define HAL_KEY_JOY_MOVE_IENBIT   BV(2) /* Mask bit for all of Port_2 */
//  144 #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
//  145 //#define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
//  146 #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(2) /*yt P2IENL - P2.2 enable/disable bit */
//  147 #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
//  148 
//  149 #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
//  150 
//  151 
//  152 /**************************************************************************************************
//  153  *                                            TYPEDEFS
//  154  **************************************************************************************************/
//  155 
//  156 
//  157 /**************************************************************************************************
//  158  *                                        GLOBAL VARIABLES
//  159  **************************************************************************************************/
//  160 static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
//  161 static halKeyCBack_t pHalKeyProcessFunction;
//  162 static uint8 HalKeyConfigured;
//  163 bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
//  164 
//  165 /**************************************************************************************************
//  166  *                                        FUNCTIONS - Local
//  167  **************************************************************************************************/
//  168 void halProcessKeyInterrupt(void);
//  169 uint8 halGetJoyKeyInput(void);
//  170 
//  171 
//  172 
//  173 /**************************************************************************************************
//  174  *                                        FUNCTIONS - API
//  175  **************************************************************************************************/
//  176 
//  177 
//  178 /**************************************************************************************************
//  179  * @fn      HalKeyInit
//  180  *
//  181  * @brief   Initilize Key Service
//  182  *
//  183  * @param   none
//  184  *
//  185  * @return  None
//  186  **************************************************************************************************/
//  187 void HalKeyInit( void )
//  188 {
//  189   /* Initialize previous key to 0 */
//  190   halKeySavedKeys = 0;
//  191 
//  192   HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
//  193   HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
//  194 
//  195   HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
//  196   HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
//  197 
//  198 
//  199   /* Initialize callback function */
//  200   pHalKeyProcessFunction  = NULL;
//  201 
//  202   /* Start with key is not configured */
//  203   HalKeyConfigured = FALSE;
//  204 }
//  205 
//  206 
//  207 /**************************************************************************************************
//  208  * @fn      HalKeyConfig
//  209  *
//  210  * @brief   Configure the Key serivce
//  211  *
//  212  * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
//  213  *          cback - pointer to the CallBack function
//  214  *
//  215  * @return  None
//  216  **************************************************************************************************/
//  217 void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
//  218 {
//  219 
//  220   /* Enable/Disable Interrupt or */
//  221   Hal_KeyIntEnable = interruptEnable;
//  222 
//  223   /* Register the callback fucntion */
//  224   pHalKeyProcessFunction = cback;
//  225 
//  226   /* Determine if interrupt is enable or not */
//  227   if (Hal_KeyIntEnable)
//  228   {
//  229     /* Rising/Falling edge configuratinn */
//  230     PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
//  231     /* For falling edge, the bit must be set. */
//  232   #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
//  233     PICTL |= HAL_KEY_SW_6_EDGEBIT;
//  234   #endif
//  235 
//  236 
//  237     /* Interrupt configuration:
//  238      * - Enable interrupt generation at the port
//  239      * - Enable CPU interrupt
//  240      * - Clear any pending interrupt
//  241      */
//  242     HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
//  243     HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
//  244     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
//  245 
//  246 
//  247     /* Rising/Falling edge configuratinn */
//  248 
//  249     HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
//  250     /* For falling edge, the bit must be set. */
//  251   #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
//  252     HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
//  253   #endif
//  254 
//  255 
//  256     /* Interrupt configuration:
//  257      * - Enable interrupt generation at the port
//  258      * - Enable CPU interrupt
//  259      * - Clear any pending interrupt
//  260      */
//  261     HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
//  262     HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
//  263     HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
//  264 
//  265 
//  266     /* Do this only after the hal_key is configured - to work with sleep stuff */
//  267     if (HalKeyConfigured == TRUE)
//  268     {
//  269       osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
//  270     }
//  271   }
//  272   else    /* Interrupts NOT enabled */
//  273   {
//  274     HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
//  275     HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
//  276 
//  277     osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
//  278   }
//  279 
//  280   /* Key now is configured */
//  281   HalKeyConfigured = TRUE;
//  282 }
//  283 
//  284 
//  285 /**************************************************************************************************
//  286  * @fn      HalKeyRead
//  287  *
//  288  * @brief   Read the current value of a key
//  289  *
//  290  * @param   None
//  291  *
//  292  * @return  keys - current keys status
//  293  **************************************************************************************************/
//  294 uint8 HalKeyRead ( void )
//  295 {
//  296   uint8 keys = 0;
//  297 
//  298   if (HAL_PUSH_BUTTON1())
//  299   {
//  300     keys |= HAL_KEY_SW_6;
//  301   }
//  302 
//  303   if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
//  304   {
//  305     keys |= halGetJoyKeyInput();
//  306   }
//  307 
//  308   return keys;
//  309 }
//  310 
//  311 
//  312 /**************************************************************************************************
//  313  * @fn      HalKeyPoll
//  314  *
//  315  * @brief   Called by hal_driver to poll the keys
//  316  *
//  317  * @param   None
//  318  *
//  319  * @return  None
//  320  **************************************************************************************************/
//  321 void HalKeyPoll (void)
//  322 {
//  323   uint8 keys = 0;
//  324 
//  325   if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
//  326   {
//  327     keys = halGetJoyKeyInput();
//  328   }
//  329 
//  330   /* If interrupts are not enabled, previous key status and current key status
//  331    * are compared to find out if a key has changed status.
//  332    */
//  333   if (!Hal_KeyIntEnable)
//  334   {
//  335     if (keys == halKeySavedKeys)
//  336     {
//  337       /* Exit - since no keys have changed */
//  338       return;
//  339     }
//  340     /* Store the current keys for comparation next time */
//  341     halKeySavedKeys = keys;
//  342   }
//  343   else
//  344   {
//  345     /* Key interrupt handled here */
//  346   }
//  347 
//  348   if (HAL_PUSH_BUTTON1())
//  349   {
//  350     keys |= HAL_KEY_SW_6;
//  351   }
//  352 
//  353   /* Invoke Callback if new keys were depressed */
//  354   if (keys && (pHalKeyProcessFunction))
//  355   {
//  356     (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
//  357   }
//  358 }
//  359 
//  360 /**************************************************************************************************
//  361  * @fn      halGetJoyKeyInput
//  362  *
//  363  * @brief   Map the ADC value to its corresponding key.
//  364  *
//  365  * @param   None
//  366  *
//  367  * @return  keys - current joy key status
//  368  **************************************************************************************************/
//  369 uint8 halGetJoyKeyInput(void)
//  370 {
//  371   /* The joystick control is encoded as an analog voltage.
//  372    * Read the JOY_LEVEL analog value and map it to joy movement.
//  373    */
//  374   uint8 adc;
//  375   uint8 ksave0 = 0;
//  376   uint8 ksave1;
//  377 
//  378   /* Keep on reading the ADC until two consecutive key decisions are the same. */
//  379   do
//  380   {
//  381     ksave1 = ksave0;    /* save previouse key reading */
//  382 
//  383     adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
//  384 
//  385     if ((adc >= 2) && (adc <= 38))
//  386     {
//  387        ksave0 |= HAL_KEY_UP;
//  388     }
//  389     else if ((adc >= 74) && (adc <= 88))
//  390     {
//  391       ksave0 |= HAL_KEY_RIGHT;
//  392     }
//  393     else if ((adc >= 60) && (adc <= 73))
//  394     {
//  395       ksave0 |= HAL_KEY_LEFT;
//  396     }
//  397     else if ((adc >= 39) && (adc <= 59))
//  398     {
//  399       ksave0 |= HAL_KEY_DOWN;
//  400     }
//  401     else if ((adc >= 89) && (adc <= 100))
//  402     {
//  403       ksave0 |= HAL_KEY_CENTER;
//  404     }
//  405   } while (ksave0 != ksave1);
//  406 
//  407   return ksave0;
//  408 }
//  409 
//  410 
//  411 /**************************************************************************************************
//  412  * @fn      halProcessKeyInterrupt
//  413  *
//  414  * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
//  415  *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
//  416  *
//  417  * @param
//  418  *
//  419  * @return
//  420  **************************************************************************************************/
//  421 void halProcessKeyInterrupt (void)
//  422 {
//  423   bool valid=FALSE;
//  424 
//  425   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
//  426   {
//  427     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
//  428     valid = TRUE;
//  429   }
//  430 
//  431   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
//  432   {
//  433     HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
//  434     valid = TRUE;
//  435   }
//  436 
//  437   if (valid)
//  438   {
//  439     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
//  440   }
//  441 }
//  442 
//  443 /**************************************************************************************************
//  444  * @fn      HalKeyEnterSleep
//  445  *
//  446  * @brief  - Get called to enter sleep mode
//  447  *
//  448  * @param
//  449  *
//  450  * @return
//  451  **************************************************************************************************/
//  452 void HalKeyEnterSleep ( void )
//  453 {
//  454 }
//  455 
//  456 /**************************************************************************************************
//  457  * @fn      HalKeyExitSleep
//  458  *
//  459  * @brief   - Get called when sleep is over
//  460  *
//  461  * @param
//  462  *
//  463  * @return  - return saved keys
//  464  **************************************************************************************************/
//  465 uint8 HalKeyExitSleep ( void )
//  466 {
//  467   /* Wake up and read keys */
//  468   return ( HalKeyRead () );
//  469 }
//  470 
//  471 /***************************************************************************************************
//  472  *                                    INTERRUPT SERVICE ROUTINE
//  473  ***************************************************************************************************/
//  474 
//  475 /**************************************************************************************************
//  476  * @fn      halKeyPort0Isr
//  477  *
//  478  * @brief   Port0 ISR
//  479  *
//  480  * @param
//  481  *
//  482  * @return
//  483  **************************************************************************************************/
//  484 HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
//  485 {
//  486   HAL_ENTER_ISR();
//  487 
//  488   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
//  489   {
//  490     halProcessKeyInterrupt();
//  491   }
//  492 
//  493   /*
//  494     Clear the CPU interrupt flag for Port_0
//  495     PxIFG has to be cleared before PxIF
//  496   */
//  497   HAL_KEY_SW_6_PXIFG = 0;
//  498   HAL_KEY_CPU_PORT_0_IF = 0;
//  499   
//  500   CLEAR_SLEEP_MODE();
//  501   HAL_EXIT_ISR();
//  502 }
//  503 
//  504 
//  505 /**************************************************************************************************
//  506  * @fn      halKeyPort2Isr
//  507  *
//  508  * @brief   Port2 ISR
//  509  *
//  510  * @param
//  511  *
//  512  * @return
//  513  **************************************************************************************************/
//  514 HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
//  515 {
//  516   HAL_ENTER_ISR();
//  517   
//  518   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
//  519   {
//  520     halProcessKeyInterrupt();
//  521   }
//  522 
//  523   /*
//  524     Clear the CPU interrupt flag for Port_2
//  525     PxIFG has to be cleared before PxIF
//  526     Notes: P2_1 and P2_2 are debug lines.
//  527   */
//  528   HAL_KEY_JOY_MOVE_PXIFG = 0;
//  529   HAL_KEY_CPU_PORT_2_IF = 0;
//  530 
//  531   CLEAR_SLEEP_MODE();
//  532   HAL_EXIT_ISR();
//  533 }
//  534 
//  535 #else
//  536 
//  537 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  538 void HalKeyInit(void){}
HalKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalKeyInit
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  539 void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
HalKeyConfig:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function HalKeyConfig
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 uint8 HalKeyRead(void){ return 0;}
HalKeyRead:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalKeyRead
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R1,#0x0
        LJMP    ?BRET
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  541 void HalKeyPoll(void){}
HalKeyPoll:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function HalKeyPoll
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalKeyPoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalKeyPoll

        END
//  542 
//  543 #endif /* HAL_KEY */
//  544 
//  545 
//  546 
//  547 
//  548 
//  549 /**************************************************************************************************
//  550 **************************************************************************************************/
// 
// 14 bytes in segment BANKED_CODE
// 24 bytes in segment BANK_RELAYS
// 
// 38 bytes of CODE memory
//
//Errors: none
//Warnings: none
