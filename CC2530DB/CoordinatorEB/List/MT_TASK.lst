###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         05/Nov/2019  17:47:38 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Components\mt\ #
#                          MT_TASK.c                                          #
#    Command line       =  -f D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zi #
#                          gbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zs #
#                          tack\Samples\SensorApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zi #
#                          gbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zs #
#                          tack\Samples\SensorApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00200000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x15 -DNWK_START_DELAY=100   #
#                          -DEXTENDED_JOINING_RANDOM_MASK=0x007F              #
#                          -DBEACON_REQUEST_DELAY=100                         #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×Ê #
#                          ÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC25 #
#                          30-eV1.3\Components\mt\MT_TASK.c -D ZTOOL_P1 -D    #
#                          xMT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\CoordinatorEB\List\   #
#                          -lA D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Z #
#                          igbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\z #
#                          stack\Samples\SensorApp\CC2530DB\CoordinatorEB\Lis #
#                          t\ --diag_suppress Pe001,Pa010 -o                  #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\CoordinatorEB\Obj\    #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä× #
#                          ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2 #
#                          530-eV1.3\Projects\zstack\Samples\SensorApp\CC2530 #
#                          DB\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅ #
#                          Ì\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Project #
#                          s\zstack\Samples\SensorApp\CC2530DB\..\Source\ -I  #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\ZMain\TI2530 #
#                          DB\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅ #
#                          Ì\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Project #
#                          s\zstack\Samples\SensorApp\CC2530DB\..\..\..\..\.. #
#                          \Components\hal\include\ -I                        #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\hal\target\CC2530EB\ -I                       #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mac\include\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ #
#                          \CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530 #
#                          -eV1.3\Projects\zstack\Samples\SensorApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\ -I       #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mac\low_level\srf04\ -I                       #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mac\low_level\srf04\single_chip\ -I           #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\mt\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT- #
#                          VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Pr #
#                          ojects\zstack\Samples\SensorApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\services\saddr\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä× #
#                          ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2 #
#                          530-eV1.3\Projects\zstack\Samples\SensorApp\CC2530 #
#                          DB\..\..\..\..\..\Components\services\sdata\ -I    #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\af\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CV #
#                          T-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV #
#                          1.3\Projects\zstack\Samples\SensorApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\stack\nwk\ -I               #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sapi\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\ #
#                          CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530- #
#                          eV1.3\Projects\zstack\Samples\SensorApp\CC2530DB\. #
#                          .\..\..\..\..\Components\stack\sec\ -I             #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sys\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\C #
#                          VT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-e #
#                          V1.3\Projects\zstack\Samples\SensorApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\zdo\ -I              #
#                          D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\zmac\ -I D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IO #
#                          T-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\ #
#                          Projects\zstack\Samples\SensorApp\CC2530DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -Ohz                  #
#                          --require_prototypes                               #
#    List file          =  D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\CoordinatorEB\List\MT #
#                          _TASK.lst                                          #
#    Object file        =  D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbe #
#                          e²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Projects\zstac #
#                          k\Samples\SensorApp\CC2530DB\CoordinatorEB\Obj\MT_ #
#                          TASK.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\Îäºº´´Î¬ÌØÎïÁªÍøÊµÑéÏä×ÊÁÏ\CVT-IOT-VS¹âÅÌ\Zigbee²¿·Ö£¨ÎïÁªÍø£©\ZStack-CC2530-eV1.3\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2011-06-07 15:36:01 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26245 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          #if !defined( NONWK )
     52          #include "MT_ZDO.h"
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          
     63          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     64          
     65          /***************************************************************************************************
     66           * GLOBALS
     67           ***************************************************************************************************/
     68          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     69          uint8 MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     70          
     71          /***************************************************************************************************
     72           * @fn      MT_TaskInit
     73           *
     74           * @brief  MonitorTest Task Initialization.  This function is put into the
     75           *         task table.
     76           *
     77           * @param   task_id - task ID of the MT Task
     78           *
     79           * @return  void
     80           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     82          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     83            MT_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#MT_TaskID
   \   00000A   F0           MOVX    @DPTR,A
     84          
     85            /* Initialize the Serial port */
     86            MT_UartInit();
   \   00000B                ; Setup parameters for call to function MT_UartInit
   \   00000B   12....       LCALL   ??MT_UartInit?relay
     87          
     88            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     89            MT_UartRegisterTaskID(task_id);
   \   00000E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??MT_UartRegisterTaskID?relay
     90          
     91            osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A10         MOV     R2,#0x10
   \   000015   7B00         MOV     R3,#0x0
   \   000017   EE           MOV     A,R6
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??osal_set_event?relay
     92          }
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
     93          
     94          /**************************************************************************************************
     95           * @fn      MT_ProcessEvent
     96           *
     97           * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
     98           *
     99           * @param   task_id - task ID of the MT Task
    100           * @param   events - event(s) for the MT Task
    101           *
    102           * @return  Bit mask of the unprocessed MT Task events.
    103           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    105          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    106            /* Could be multiple events, so switch won't work */
    107            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??MT_ProcessEvent_0 & 0xFFFF
    108            {
    109              uint8 *msg_ptr = osal_msg_receive(task_id);
   \   000011                ; Setup parameters for call to function osal_msg_receive
   \   000011   12....       LCALL   ??osal_msg_receive?relay
   \   000014   8A..         MOV     ?V0 + 2,R2
   \   000016   8B..         MOV     ?V0 + 3,R3
    110          
    111              if (msg_ptr != NULL)
   \   000018   EA           MOV     A,R2
   \   000019   45..         ORL     A,?V0 + 3
   \   00001B   7003         JNZ     $+5
   \   00001D   02....       LJMP    ??MT_ProcessEvent_1 & 0xFFFF
    112              {
    113                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FE           MOV     R6,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FF           MOV     R7,A
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   14           DEC     A
   \   000031   6066         JZ      ??MT_ProcessEvent_2
   \   000033   14           DEC     A
   \   000034   605E         JZ      ??MT_ProcessEvent_3
   \   000036   24FE         ADD     A,#-0x2
   \   000038   6021         JZ      ??MT_ProcessEvent_4
   \   00003A   24FE         ADD     A,#-0x2
   \   00003C   6018         JZ      ??MT_ProcessEvent_5
   \   00003E   24E2         ADD     A,#-0x1e
   \   000040   705E         JNZ     ??MT_ProcessEvent_6
   \   000042                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   2405         ADD     A,#0x5
   \   00004C   F9           MOV     R1,A
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??MTProcessAppRspMsg?relay
   \   000054   804A         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_5:
   \   000056                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000056   12....       LCALL   ??MT_ProcessDebugStr?relay
   \   000059   8045         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_4:
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   2405         ADD     A,#0x5
   \   000065   F5..         MOV     ?V0 + 6,A
   \   000067                ; Setup parameters for call to function MT_UartCalcFCS
   \   000067   74FE         MOV     A,#-0x2
   \   000069   25..         ADD     A,?V0 + 6
   \   00006B   FC           MOV     R4,A
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
   \   000075   7900         MOV     R1,#0x0
   \   000077   12....       LCALL   ??MT_UartCalcFCS?relay
   \   00007A   E9           MOV     A,R1
   \   00007B   C0E0         PUSH    A
   \   00007D   EE           MOV     A,R6
   \   00007E   25..         ADD     A,?V0 + 6
   \   000080   F8           MOV     R0,A
   \   000081   EF           MOV     A,R7
   \   000082   3400         ADDC    A,#0x0
   \   000084   F9           MOV     R1,A
   \   000085   E8           MOV     A,R0
   \   000086   24FF         ADD     A,#-0x1
   \   000088   F582         MOV     DPL,A
   \   00008A   E9           MOV     A,R1
   \   00008B   34FF         ADDC    A,#-0x1
   \   00008D   F583         MOV     DPH,A
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
   \   000092   800C         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_3:
   \   000094                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   000094   12....       LCALL   ??MT_ProcessDebugMsg?relay
   \   000097   8007         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_2:
   \   000099                ; Setup parameters for call to function MT_ProcessIncoming
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   ??MT_ProcessIncoming?relay
    114          
    115                osal_msg_deallocate(msg_ptr);
   \                     ??MT_ProcessEvent_6:
   \   0000A0                ; Setup parameters for call to function osal_msg_deallocate
   \   0000A0   AA..         MOV     R2,?V0 + 2
   \   0000A2   AB..         MOV     R3,?V0 + 3
   \   0000A4   12....       LCALL   ??osal_msg_deallocate?relay
    116              }
    117          
    118              /* Return unproccessed events */
    119              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_1:
   \   0000A7   AA..         MOV     R2,?V0 + 0
   \   0000A9   E5..         MOV     A,?V0 + 1
   \   0000AB   6480         XRL     A,#0x80
   \   0000AD   FB           MOV     R3,A
   \   0000AE   807C         SJMP    ??MT_ProcessEvent_7
    120            }
    121          
    122            if ( events & MT_SECONDARY_INIT_EVENT )
   \                     ??MT_ProcessEvent_0:
   \   0000B0   EA           MOV     A,R2
   \   0000B1   5410         ANL     A,#0x10
   \   0000B3   600C         JZ      ??MT_ProcessEvent_8
    123            {
    124              MT_Init();
   \   0000B5                ; Setup parameters for call to function MT_Init
   \   0000B5   12....       LCALL   ??MT_Init?relay
    125              /* Return unproccessed events */
    126              return (events ^ MT_SECONDARY_INIT_EVENT);
   \   0000B8   E5..         MOV     A,?V0 + 0
   \   0000BA   6410         XRL     A,#0x10
   \                     ??MT_ProcessEvent_9:
   \   0000BC   FA           MOV     R2,A
   \   0000BD   AB..         MOV     R3,?V0 + 1
   \   0000BF   806B         SJMP    ??MT_ProcessEvent_7
    127            }
    128          
    129            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_8:
   \   0000C1   EA           MOV     A,R2
   \   0000C2   5402         ANL     A,#0x2
   \   0000C4   6006         JZ      ??MT_ProcessEvent_10
    130            {
    131              /* Return unproccessed events */
    132              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   0000C6   EA           MOV     A,R2
   \   0000C7   6402         XRL     A,#0x2
   \   0000C9   FA           MOV     R2,A
   \   0000CA   8060         SJMP    ??MT_ProcessEvent_7
    133            }
    134          
    135          #if !defined( NONWK )
    136            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_10:
   \   0000CC   EA           MOV     A,R2
   \   0000CD   5408         ANL     A,#0x8
   \   0000CF   6009         JZ      ??MT_ProcessEvent_11
    137            {
    138              MT_AfExec();
   \   0000D1                ; Setup parameters for call to function MT_AfExec
   \   0000D1   12....       LCALL   ??MT_AfExec?relay
    139              return (events ^ MT_AF_EXEC_EVT);
   \   0000D4   E5..         MOV     A,?V0 + 0
   \   0000D6   6408         XRL     A,#0x8
   \   0000D8   80E2         SJMP    ??MT_ProcessEvent_9
    140            }
    141          #endif  /* NONWK */
    142          
    143            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    144          #if defined MT_SYS_FUNC
    145            if ( events & (MT_SYS_OSAL_EVENT_MASK))
   \                     ??MT_ProcessEvent_11:
   \   0000DA   EB           MOV     A,R3
   \   0000DB   540F         ANL     A,#0xf
   \   0000DD   6049         JZ      ??MT_ProcessEvent_12
    146            {
    147              if (events & MT_SYS_OSAL_EVENT_0)
   \   0000DF   EB           MOV     A,R3
   \   0000E0   5408         ANL     A,#0x8
   \   0000E2   600B         JZ      ??MT_ProcessEvent_13
    148              {
    149                MT_SysOsalTimerExpired(0x00);
   \   0000E4                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000E4   7900         MOV     R1,#0x0
   \   0000E6   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    150                events ^= MT_SYS_OSAL_EVENT_0;
   \   0000E9   7408         MOV     A,#0x8
   \   0000EB   65..         XRL     A,?V0 + 1
   \   0000ED   F5..         MOV     ?V0 + 1,A
    151              }
    152          
    153              if (events & MT_SYS_OSAL_EVENT_1)
   \                     ??MT_ProcessEvent_13:
   \   0000EF   E5..         MOV     A,?V0 + 1
   \   0000F1   5404         ANL     A,#0x4
   \   0000F3   600B         JZ      ??MT_ProcessEvent_14
    154              {
    155                MT_SysOsalTimerExpired(0x01);
   \   0000F5                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000F5   7901         MOV     R1,#0x1
   \   0000F7   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    156                events ^= MT_SYS_OSAL_EVENT_1;
   \   0000FA   7404         MOV     A,#0x4
   \   0000FC   65..         XRL     A,?V0 + 1
   \   0000FE   F5..         MOV     ?V0 + 1,A
    157              }
    158          
    159              if (events & MT_SYS_OSAL_EVENT_2)
   \                     ??MT_ProcessEvent_14:
   \   000100   E5..         MOV     A,?V0 + 1
   \   000102   5402         ANL     A,#0x2
   \   000104   600B         JZ      ??MT_ProcessEvent_15
    160              {
    161                MT_SysOsalTimerExpired(0x02);
   \   000106                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000106   7902         MOV     R1,#0x2
   \   000108   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    162                events ^= MT_SYS_OSAL_EVENT_2;
   \   00010B   7402         MOV     A,#0x2
   \   00010D   65..         XRL     A,?V0 + 1
   \   00010F   F5..         MOV     ?V0 + 1,A
    163              }
    164          
    165              if (events & MT_SYS_OSAL_EVENT_3)
   \                     ??MT_ProcessEvent_15:
   \   000111   E5..         MOV     A,?V0 + 1
   \   000113   5401         ANL     A,#0x1
   \   000115   600B         JZ      ??MT_ProcessEvent_16
    166              {
    167                MT_SysOsalTimerExpired(0x03);
   \   000117                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   000117   7903         MOV     R1,#0x3
   \   000119   12....       LCALL   ??MT_SysOsalTimerExpired?relay
    168                events ^= MT_SYS_OSAL_EVENT_3;
   \   00011C   7401         MOV     A,#0x1
   \   00011E   65..         XRL     A,?V0 + 1
   \   000120   F5..         MOV     ?V0 + 1,A
    169              }
    170          
    171              return events;
   \                     ??MT_ProcessEvent_16:
   \   000122   AA..         MOV     R2,?V0 + 0
   \   000124   AB..         MOV     R3,?V0 + 1
   \   000126   8004         SJMP    ??MT_ProcessEvent_7
    172            }
    173          #endif
    174          
    175            /* Discard or make more handlers */
    176            return 0;
   \                     ??MT_ProcessEvent_12:
   \   000128   7A00         MOV     R2,#0x0
   \   00012A   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_7:
   \   00012C   7F08         MOV     R7,#0x8
   \   00012E   02....       LJMP    ?BANKED_LEAVE_XDATA
    177          
    178          } /* MT_ProcessEvent() */

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TaskInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_ProcessIncomingCommand
    182           *
    183           * @brief
    184           *
    185           *   Process Event Messages.
    186           *
    187           * @param   *msg - pointer to event message
    188           *
    189           * @return
    190           ***************************************************************************************************/
    191          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
    192          {
    193            uint8 len, *msg_ptr = msg->msg;
    194          
    195            /* Use the first byte of the message as the command ID */
    196            switch ( msg->hdr.event )
    197            {
    198              case CMD_SERIAL_MSG:
    199                MT_ProcessIncoming(msg_ptr);
    200                break;
    201          
    202              case CMD_DEBUG_MSG:
    203                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
    204                break;
    205          
    206              case CB_FUNC:
    207                /*
    208                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    209                  because we have copied data already in the allocated message
    210                */
    211          
    212                /* msg_ptr is the beginning of the intended SPI message */
    213                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    214          
    215                /*
    216                  FCS goes to the last byte in the message and is calculated over all
    217                  the bytes except FCS and SOP
    218                */
    219                msg_ptr[len-1] = MT_UartCalcFCS(0, msg_ptr + 1, (uint8)(len-2));
    220          #ifdef MT_UART_DEFAULT_PORT
    221                //HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
    222          #endif
    223                break;
    224          
    225              case CMD_DEBUG_STR:
    226                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
    227                break;
    228          
    229          #if !defined ( NONWK )
    230              case MT_SYS_APP_RSP_MSG:
    231                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    232                MTProcessAppRspMsg( msg_ptr, len );
    233                break;
    234          #endif  // NONWK
    235          
    236          #if defined (MT_UTIL_FUNC)
    237          #if defined ZCL_KEY_ESTABLISH
    238              case ZCL_KEY_ESTABLISH_IND:
    239                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    240                break;
    241          #endif
    242          #endif
    243          #ifdef MT_ZDO_CB_FUNC
    244              case ZDO_STATE_CHANGE:
    245                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    246                break;
    247          #endif
    248          
    249              default:
    250                break;
    251            }
    252          }
    253          
    254          #ifdef MT_TASK
    255          /***************************************************************************************************
    256           * @fn      MT_TransportAlloc
    257           *
    258           * @brief   Allocate memory for transport msg
    259           *
    260           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    261           *          uint8 len - length
    262           *
    263           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    264           ***************************************************************************************************/
    265          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
    266          {
    267            uint8 *p;
    268          
    269            (void)cmd0;  // Intentionally unreferenced parameter
    270          
    271            /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
    272            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
    273          
    274            if (p)
    275            {
    276              p++; /* Save space for SOP_VALUE, msg structure */
    277              return p;
    278            }
    279            else
    280            {
    281              return NULL;
    282            }
    283          }
    284          
    285          /***************************************************************************************************
    286           * @fn      MT_TransportSend
    287           *
    288           * @brief   Fill in SOP and FCS then send out the msg
    289           *
    290           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    291           *
    292           * @return  None
    293           ***************************************************************************************************/
    294          void MT_TransportSend(uint8 *pBuf)
    295          {
    296            uint8 *msgPtr;
    297            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
    298          
    299            /* Move back to the SOP */
    300            msgPtr = pBuf-1;
    301          
    302            /* Insert SOP */
    303            msgPtr[0] = MT_UART_SOF;
    304          
    305            /* Insert FCS */
    306            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (0, pBuf, (3 + dataLen));
    307            /* Send to UART */
    308          #ifdef MT_UART_DEFAULT_PORT
    309            //HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
    310          #endif
    311          
    312            /* Deallocate */
    313            osal_msg_deallocate(msgPtr);
    314          }
    315          #endif /* MT_TASK */
    316          /***************************************************************************************************
    317           ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     MT_ProcessEvent                 1      0     16
       -> osal_msg_receive           0      0     32
       -> MTProcessAppRspMsg         0      0     32
       -> MT_ProcessDebugStr         0      0     32
       -> MT_UartCalcFCS             0      0     32
       -> MT_ProcessDebugMsg         0      0     32
       -> MT_ProcessIncoming         0      0     32
       -> osal_msg_deallocate        0      0     32
       -> MT_Init                    0      0     32
       -> MT_AfExec                  0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
       -> MT_SysOsalTimerExpired     0      0     32
     MT_TaskInit                     0      0      9
       -> MT_UartInit                0      0     18
       -> MT_UartRegisterTaskID      0      0     18
       -> osal_set_event             0      0     18


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     MT_TaskID                  1
     MT_TaskInit               33
     MT_ProcessEvent          305
     ??MT_TaskInit?relay        6
     ??MT_ProcessEvent?relay    6

 
 338 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
 350 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
